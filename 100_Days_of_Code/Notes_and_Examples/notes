# # This is where I will keep notes and examples for problems and tests. Nothing will run here - use the Shell


# ########## Day 2 Notes


# # For quick math problems instead of doing this:
# score = 0
# #User scores a point
# score = score + 1
# # You can do:
# score = 0
# # User scores a point
# score += 1
# # This also works with:
# -=
# *=
# /=


# ############ Day 3 Notes

# # A modulo shows if a number has a remainder or not. This is a good way to check odd, even. All even is /2 with 0 remianing
# %=
# # EX
# number = int(input("Which number do you want to check? "))
# number %= 2
# if number == 0:
#     print("This is an even number.")
# else:
#     print("This is an odd number.")

# ##

# # In a regular if /else it looks like this:
# if condition:
#   do this
# else:
#   do this
# # But a nested if / else looks like this:
# if condition:
#   if another condition:
#     do this
#   else:
#     do this
# else:
#   do this
# # EX
# print('Welcome to the park!')
# height = int(input('How tall are you? '))

# if height >= 120:
#   print('You can ride this rollercoaster')
#   age = int(input('How old are you? '))
#   if age < 12:
#     print('Please pay $5.')
#   elif age <= 18:
#     print('Please pay $7')
#   else:
#     print('Please pay $12')
# else:
#   print('You are not tall enough to ride this ride.')

# ################## Day 4

# import random

# random_number = random.randint(1, 500)
# print(random_number)
# #random.random gives you a number from .1 -.999999 we can * by 5 to get us a random float from 1 - 4.9
# random_float = random.random() * 5
# print(random_float)

# # Lists

# states_in_us = ["Delware", "Virgina", "Maine"]
# cities_in_us = ["Arlington", "Fairfax", "Alexandria"]

# # Nested list
# combined = [states_in_us, cities_in_us]
# print(combined[0][1])
# # Result would be "Virgina" bc  it is in the 0 list and in the second position.


# ################################# Day 5

# # For loops
# for item in list_of_items:
#   #Do something to each item

# # for loops with "Range" function. You can skip numbers using the "step option" in this ex I am doing 3 steps i.e 1, 4, 7, 10

# for number in range(1, 11, 3):
#   print(number)

# ####################################### Day 6

# # Code Block, Fuctions, While loops

# # We can create a function "func()" and have it do something for us then "call" the func to do the action:

# def func():
#     print('Hello')
#     print('Bye')

# # To call func all thats neeeded is: and it will run. In this case it will print
# func()

# # While Loops
# # These are used when you need to carry out a function many times until the condition is met, otherwise a for loop may be better
# # For loops have an end as While loops can turn into a "Infinite Loop"
# while something_is_true:
#   #Do something repeatedly
# #Until something becomes False

# # EX
# number_of_hurdles = 6
# while number_of_hurdles > 0:
#   jump()
#   number_of_hurdles -= 1

# while not #something_that_is:
#   #do_something
# #or
# while #something != True:
#   #do_something

# while not at_goal():
#     if wall_in_front():
#         finish()
#     else:
#         move()

# # #def turn_right():
# #     turn_left()
# #     turn_left()
# #     turn_left()

# # def finish():
# #     turn_left()
# #     move()
# #     turn_right()
# #     move()
# #     turn_right()
# #     move()
# #     turn_left()

# # while not at_goal():
# #     if wall_in_front():
# #         finish()
# #     else:
# #         move()


# ############################################## Day 8

# #  Function & Parameters

# # Functions with Inputs
# def greet():
#     print('hi')
#     print('hi')
#     print('hi')

# greet()

# # In the func below, (name) is the "parameter" and when we call it 'Anthony' is the "argument"

# def greet_with_name(name):
#     print(f'hi {name}')
#     print(f'how are you {name}')
#     print(f'Whats up {name}')
# greet_with_name('Anthony')

# # Func with more than 1 input
# def greet_with(name, location):
#     print(f'hi {name} welcome to {location}')
#     print(f'how are you {name} when did you come to {location}')
#     print(f'Whats up {name} fancy seeing you in {location}')
# greet_with('Anthony', 'Arlington')

# # Key word arguments
# def my_func(a, b, c):
#     #Do this with a
#     # Then do this with b
#     # Finally do this with c
# my_func(a=1, b=2, c=3)


# ########################## Day 9

# # Nesting

# capitals = {
#   "France": "Paris",
#   "Germany": "Berlin",
# }

# # Nesting a List in a Dict

# travel_log = {
#   "France": ["Paris", "Lille", "Dijon"]
#   "Germany": ["Berlin", "Hamburg", "Stuttgart"]
# }

# # Nesting a Dict in a Dict

# travel_log = {
# "France": {"cities_visited": ["Paris", "Lille", "Dijon"], "total_visits": 12},
#   "Germany": ["Berlin", "Hamburg", "Stuttgart"]
# }

# # Nesting a dict in a List

# [{
#   Key: [List],
#   Keyt2: {Dict},
# },
# {
#   Key: Value,
#   Key2: Value,
# }]

# travel_log = [
#   {
#     "country": "France",
#     "cities_visited": ["Paris", "Lille", "Dijon"],
#     "total_visits": 12,
#   },
#   {
#     "country": "Germany",
#     "cities_visited:" ["Berlin", "Hamburg", "Stuttgart"],
#     "total_visits": 5,
#   },
# ]

# ################################################################### Day 10

# # Functions with Outputs

# def my_function():
#   result = 3 * 2
#   return result

# output = my_function() # output = 6

# ############ Docstrings

# # This '''info''' will help provide info about whatever func you make when you get ready to call it.

# def format_name(f_name, l_name):
#     '''Take a first and last name and format it
#     to return the title case version of the name.'''
#     if f_name == '' or l_name == '':
#         return 'You did not provide vaild inputs'
#     format_f_name = f_name.title()
#     format_l_name = l_name.title()
#     return f'{format_f_name} {format_l_name}'


# print(format_name(input('What is your first name? '), input('What is your last name? ')))


############### Day 12 ############
#Scope



# Global Scope can be accessed anywhere

enemies = 1

# Local Scope can only be accessed in a func (while, def, etc..)

def increase_enemies():
    enemies = 2 
    print(f'enemies inside the func: {enemies}')
    
increase_enemies()
print(f'enemies outside the func {enemies}')

# GLobal Constants are values that never change and are written in caps

PI = 3.14159
URL = 'google.com'